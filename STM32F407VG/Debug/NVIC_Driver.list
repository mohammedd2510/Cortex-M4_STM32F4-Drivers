
NVIC_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010390  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a45  00000000  00000000  00010403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000321  00000000  00000000  00010e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000100  00000000  00000000  00011170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000ac  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000c89  00000000  00000000  0001131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000580  00000000  00000000  00011fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003bbf  00000000  00000000  00012525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000030c  00000000  00000000  000160e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000163f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000370 	.word	0x08000370

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000370 	.word	0x08000370

080001e8 <NVIC_EnableIRQ>:
 * @brief Enables a specific interrupt in the NVIC.
 * @details This function enables the interrupt specified by the IRQn parameter in the NVIC
 * @param IRQn The interrupt number to be enabled.
 * @note IRQn must not be Negative
 */
void NVIC_EnableIRQ(IRQn_Type IRQn){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)IRQn >=0){
		NVIC->ISER[((uint32_t)IRQn >> 5)] = (1UL << ((uint32_t)IRQn & 0x1F));
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	f003 021f 	and.w	r2, r3, #31
 80001f8:	4907      	ldr	r1, [pc, #28]	; (8000218 <NVIC_EnableIRQ+0x30>)
 80001fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fe:	095b      	lsrs	r3, r3, #5
 8000200:	2001      	movs	r0, #1
 8000202:	fa00 f202 	lsl.w	r2, r0, r2
 8000206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	e000e100 	.word	0xe000e100

0800021c <NVIC_GenerateSGI>:
 *
 * @note This function does not return a value.
 *       The specific implementation details of the generateSGI function may vary depending on the system.
 */
void NVIC_GenerateSGI(IRQn_Type IRQn)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	if((uint8_t)IRQn >=0)
	{
		NVIC->STIR = (uint8_t)IRQn;
 8000226:	79fa      	ldrb	r2, [r7, #7]
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <NVIC_GenerateSGI+0x20>)
 800022a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	}
	else
	{
		/*Nothing*/
	}
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <SysTick_DeInit>:
  * @details This function deinitializes the SysTick timer by disabling it and clearing any pending interrupts.
  * @param  None
  * @return None
  */
void SysTick_DeInit(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Msk);
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <SysTick_DeInit+0x34>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <SysTick_DeInit+0x34>)
 800024a:	f023 0301 	bic.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <SysTick_DeInit+0x34>)
 8000252:	2200      	movs	r2, #0
 8000254:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <SysTick_DeInit+0x34>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <SysTick_DeInit+0x34>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <SysTick_DeInit+0x34>)
 8000262:	f023 0302 	bic.w	r3, r3, #2
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000e010 	.word	0xe000e010

08000278 <SysTick_Handler>:
	return ElapsedTicks;
}


void SysTick_Handler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <SysTick_Handler+0x24>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d101      	bne.n	800028a <SysTick_Handler+0x12>
	{
		SysTick_DeInit();
 8000286:	f7ff ffdb 	bl	8000240 <SysTick_DeInit>
	}
	if(SysTick_CallBack)
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <SysTick_Handler+0x28>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d002      	beq.n	8000298 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <SysTick_Handler+0x28>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4798      	blx	r3
	}
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000020 	.word	0x20000020
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <main>:
 * @brief          : Main program body
 ******************************************************************************/
#include "CortexM4/CortexM4_Interface.h"

int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(USART2_IRQn);
 80002a8:	2026      	movs	r0, #38	; 0x26
 80002aa:	f7ff ff9d 	bl	80001e8 <NVIC_EnableIRQ>
	NVIC_GenerateSGI(USART2_IRQn);
 80002ae:	2026      	movs	r0, #38	; 0x26
 80002b0:	f7ff ffb4 	bl	800021c <NVIC_GenerateSGI>
    /* Loop forever */
	for(;;);
 80002b4:	e7fe      	b.n	80002b4 <main+0x10>

080002b6 <USART2_IRQHandler>:
}
void USART2_IRQHandler (void){
 80002b6:	b480      	push	{r7}
 80002b8:	b083      	sub	sp, #12
 80002ba:	af00      	add	r7, sp, #0
	uint8_t i =0;
 80002bc:	2300      	movs	r3, #0
 80002be:	71fb      	strb	r3, [r7, #7]
	i++;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	3301      	adds	r3, #1
 80002c4:	71fb      	strb	r3, [r7, #7]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
	...

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ffcd 	bl	80002a4 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	20000024 	.word	0x20000024

08000324 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	; (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	; (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	; (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
