/**
 ******************************************************************************
 * @file           : STM32F4xx_HAL_RCC.h
 * @author         : Mohamed Osama
 * @brief          : Contains The Static Code to control the RCC Module
 ******************************************************************************/
#include "HAL_Drivers/RCC/STM32F4xx_HAL_RCC.h"

/**
  * @brief  Configures the RCC oscillators based on the specified parameters in the RCC_OscInitTypeDef structure.
  *
  * @details This function configures the RCC oscillators based on the parameters specified in the RCC_OscInitTypeDef structure.
  *          It enables or disables the HSE (High-Speed External) oscillator, HSI (High-Speed Internal) oscillator,
  *          LSE (Low-Speed External) oscillator, LSI (Low-Speed Internal) oscillator, and PLL (Phase-Locked Loop).
  *
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that contains the configuration information for the RCC oscillators.
  *
  * @retval HAL_StatusTypeDef: HAL status.
  *          - HAL_OK: Operation completed successfully.
  *          - HAL_ERROR: Operation completed with an error.
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
	HAL_StatusTypeDef RetStatus = HAL_OK;
	if(NULL == RCC_OscInitStruct )
	{
		RetStatus = HAL_ERROR;
	}
	else
	{
		if(RCC_OSCILLATORTYPE_HSE == RCC_OscInitStruct->OscillatorType)
		{
			if(RCC_HSE_ON == RCC_OscInitStruct->HSEState){
				SET_BIT(RCC->CR , RCC_CR_HSEON_Msk);
			}
			else if (RCC_HSE_OFF == RCC_OscInitStruct->HSEState){
				CLEAR_BIT(RCC->CR , RCC_CR_HSEON_Msk);
			}
			else { /* Nothing */ }
		}
		else if(RCC_OSCILLATORTYPE_HSI == RCC_OscInitStruct->OscillatorType)
		{
			if(RCC_HSI_ON == RCC_OscInitStruct->HSIState)
			{
				SET_BIT(RCC->CR , RCC_CR_HSION_Msk);
			}
			else if (RCC_HSI_OFF == RCC_OscInitStruct->HSIState)
			{
				CLEAR_BIT(RCC->CR , RCC_CR_HSION_Msk);
			}
			else { /* Nothing */ }

		}
		else if(RCC_OSCILLATORTYPE_LSE == RCC_OscInitStruct->OscillatorType)
		{
			if(RCC_LSE_ON == RCC_OscInitStruct->LSEState)
			{
				SET_BIT(RCC->BDCR , RCC_BDCR_LSEON_Msk);
			}
			else if (RCC_LSE_OFF == RCC_OscInitStruct->LSEState)
			{
				CLEAR_BIT(RCC->BDCR , RCC_BDCR_LSEON_Msk);
			}
			else { /* Nothing */ }
		}
		else if(RCC_OSCILLATORTYPE_LSI == RCC_OscInitStruct->OscillatorType)
		{
			if(RCC_LSI_ON == RCC_OscInitStruct->LSIState)
			{
				SET_BIT(RCC->CSR , RCC_CSR_LSION_Msk);
			}
			else if (RCC_LSI_OFF == RCC_OscInitStruct->LSIState)
			{
				CLEAR_BIT(RCC->CSR , RCC_CSR_LSION_Msk);
			}
			else { /* Nothing */ }
		}
		else { /* Nothing */}
	}
	return RetStatus;
}

/**
  * @brief  RCC Clock Initialization
  *
  * @details The RCC_ClkInitTypeDef structure must be filled with the appropriate values before
  * 		   calling this function. The AHBCLKDivider, APB1CLKDivider, and APB2CLKDivider members
  * 		   of the structure specify the desired clock dividers for the AHB, APB1, and APB2 buses
  * 		   respectively.
  *
  * @param[in]  ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that contains
  *                            the configuration information for RCC clock initialization.
  *
  * @retval HAL status
  *           - HAL_OK:      Clock initialization successful.
  *           - HAL_ERROR:   Clock initialization failed.
  *
  * @note   After calling this function, the updated clock frequencies will be applied.
  *
  */
HAL_StatusTypeDef RCC_ClkInit(RCC_ClkInitTypeDef* ClkInitStruct){
	return 0;
}
