/**
 ******************************************************************************
 * @file           : CortexM4_Core_SysTick.h
 * @author         : Mohamed Osama
 * @brief          : Contains The declarations To Control System Timer
 ******************************************************************************/
#ifndef CORTEXM4_CORE_SYSTICK_H_
#define CORTEXM4_CORE_SYSTICK_H_

/* ------------------- Includes Start ----------------------------------------*/
#include "Common/Std_Types.h"
#include "CortexM4/CortexM4_Core_SysTick_Cfg.h"
#include "Common/Common_Macros.h"
/* ------------------- Includes End ------------------------------------------*/


/* ------------------- Macro Declarations Start ------------------------------*/
 /* Memory Mapping of Core Hardware */
#define SysTick_BASE 	(0xE000E010UL)  // Base address of the SysTick peripheral
#define SysTick			((SysTick_Type*)SysTick_BASE)  // Pointer to the SysTick peripheral registers

/* SysTick Control / Status Register Definitions */
#define SysTick_CTRL_ENABLE_Pos 			0U   /**< Position of the ENABLE bit in the SysTick Control and Status Register */
#define SysTick_CTRL_ENABLE_Msk 		   (1U << SysTick_CTRL_ENABLE_Pos)   /**< Mask for the ENABLE bit in the SysTick Control and Status Register */

#define SysTick_CTRL_TICKINT_Pos 			1U   /**< Position of the TICKINT bit in the SysTick Control and Status Register */
#define SysTick_CTRL_TICKINT_Msk 		   (1U << SysTick_CTRL_TICKINT_Pos)   /**< Mask for the TICKINT bit in the SysTick Control and Status Register */

#define SysTick_CTRL_CLKSOURCE_Pos 			2U   /**< Position of the CLKSOURCE bit in the SysTick Control and Status Register */
#define SysTick_CTRL_CLKSOURCE_Msk 		   (1U << SysTick_CTRL_CLKSOURCE_Pos)   /**< Mask for the CLKSOURCE bit in the SysTick Control and Status Register */

#define SysTick_CTRL_COUNTFLAG_Pos 			16U   /**< Position of the COUNTFLAG bit in the SysTick Control and Status Register */
#define SysTick_CTRL_COUNTFLAG_Msk 		   (1U << SysTick_CTRL_COUNTFLAG_Pos)   /**< Mask for the COUNTFLAG bit in the SysTick Control and Status Register */

/* SysTick Reload Register Definitions */
#define SysTick_LOAD_RELOAD_Pos 			0U   /**< Position of the RELOAD value in the SysTick Reload Value Register */
#define SysTick_LOAD_RELOAD_Msk 		   (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)   /**< Mask for the RELOAD value in the SysTick Reload Value Register */
/****************************************************/
#define SysTick_SingleInterval_Mode			0U
#define SysTick_PeriodicInterval_Mode		1U

/* ------------------- Macro Declarations End --------------------------------*/

/* ------------------- Macro Function Declarations Start ---------------------*/


/* ------------------- Macro Function Declarations End -----------------------*/

/* ------------------- Data Type Declarations Start --------------------------*/
/**
  * @brief  SysTick Control and Status Register Structure
  *
  * This structure represents the SysTick Control and Status Register (SysTick_Type).
  * It contains the following members:
  *
  * @note   The structure fields represent the register offsets and access types.
  *
  * @ingroup SysTick
  */
typedef struct
{
	volatile uint32_t CTRL;   /*!< Offset: 0x00 (R/W)  SysTick Control and Status Register */

	volatile uint32_t LOAD;   /*!< Offset: 0x04 (R/W)  SysTick Reload Value Register */

	volatile uint32_t VAL;    /*!< Offset: 0x08 (R/W)  SysTick Current Value Register */

	volatile uint32_t CALIB;  /*!< Offset: 0x0C (R/ )  SysTick Calibration Value Register */
} SysTick_Type;

typedef void (*ptrFunction)(void);
/* ------------------- Data Type Declarations End ----------------------------*/

/* ------------------- Software Interfaces Declarations Start ----------------*/
/**
  * @brief  Initializes the SysTick timer with the specified number of ticks.
  * @details This function initializes the SysTick timer with the provided number of ticks.
  *          The SysTick timer is a 24-bit down counter that generates an interrupt when it reaches zero.
  * @param  SysTick_Ticks: The number of ticks to be loaded into the SysTick timer.
  * @return 0 if the initialization is successful, 1 if it fails.
  */
uint8_t SysTick_Init(uint32_t SysTick_Ticks);

/**
  * @brief  Deinitializes the SysTick timer.
  * @details This function deinitializes the SysTick timer by disabling it and clearing any pending interrupts.
  * @param  None
  * @return None
  */
void SysTick_DeInit(void);

/**
  * @brief  Blocks the execution for the specified number of ticks using the SysTick timer.
  * @details This function blocks the execution for the provided number of ticks using the SysTick timer.
  *          It waits until the SysTick timer reaches zero.
  * @param  SysTick_Ticks: The number of ticks to wait.
  * @return None
  */
void SysTick_WaitBlocking(uint32_t SysTick_Ticks);

/**
  * @brief  Sets up a single interval using the SysTick timer and registers a callback function.
  * @details This function sets up a single interval using the SysTick timer with the provided number of ticks.
  *          It also registers a callback function to be called when the SysTick timer reaches zero.
  * @param  SysTick_Ticks: The number of ticks for the interval.
  * @param  CallBack: Pointer to the callback function.
  * @return None
  */
void SysTick_SingelInterval(uint32_t SysTick_Ticks, ptrFunction CallBack);

/**
  * @brief  Sets up a periodic interval using the SysTick timer and registers a callback function.
  * @details This function sets up a periodic interval using the SysTick timer with the provided number of ticks.
  *          It also registers a callback function to be called when the SysTick timer reaches zero.
  * @param  SysTick_Ticks: The number of ticks for the interval.
  * @param  CallBack: Pointer to the callback function.
  * @return None
  */
void SysTick_PeriodicInterval(uint32_t SysTick_Ticks, ptrFunction CallBack);

/**
  * @brief  Retrieves the remaining number of ticks in the SysTick timer.
  * @details This function retrieves the remaining number of ticks in the SysTick timer.
  * @param  None
  * @return The remaining number of ticks in the SysTick timer.
  */
uint32_t SysTick_GetRemainingTicks(void);

/* ------------------- Software Interfaces Declarations End ------------------*/



#endif /* CORTEXM4_CORTEXM4_CORE_SYSTICK_H_ */














